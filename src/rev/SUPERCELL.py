
# *** numpy libraries
import numpy as np 	
import matplotlib.pyplot as plt
try:	
	from ase.visualize import view
	from ase import Atoms
	from ase.visualize.plot import plot_atoms
except: print('can not load ASE module. (pipX install ase-atomistics)')

try:	from src import Logs
except:	
	try: import Logs as Logs
	except: print('WARNING :: Set.import_libraries() :: can not import ORR ')

class SUPERCELL(object):
	def __init__(self, file_name=None, name=None, atoms=None, atoms_list=None):
		"""
		Initialize the SUPERCELL object.

		Attributes:
		- name (str): Name of the supercell.
		- path (str): Path to the file (if applicable).
		- file_name (str): Name of the file containing supercell data.
		
		- N (int): Total number of atoms in the supercell.
		- scale (float): Scale factor for the supercell, default is 1.0.
		- selective_dynamics (bool): Indicates if selective dynamics feature is used.
		
		- atoms (np.array): A 3xN numpy array containing atomic positions.
		- atoms_number (list): List containing the number of each type of atom, e.g., [n(Fe), n(N), n(C), n(H)].
		
		- contrains (list or None): List of constraints applied to atoms (if any).
		
		- atoms_names_list (list): List of atom names in the order they appear, e.g., [Fe, N, N, N, N, C, C, C, C, H].
		- atoms_names_ID (list): List of unique atom names, e.g., [Fe, N, C, H].
		- atoms_names_full (str): Concatenated string of atom names, e.g., FeFeFeNNNNNNNCCCCCCCCCCCCCCCHHHHHHHHHHHHHHHH.
		
		- cell (np.array): A 3x3 numpy array representing the lattice vectors [a1, a2, a3].
		- distances (np.array or None): A matrix representing distances between atoms (if computed).
		"""
		
		self.name = name
		self.path = None
		self.file_name = file_name

		self.N = None                  
		self.scale = 1.0               
		self.selective_dynamics = None 

		self.atoms = atoms             
		self.atoms_number = None       

		self.contrains = None
		
		self.atoms_names_list = None   
		self.atoms_names_ID = None     
		self.atoms_names_full = None   

		self.cell = None               
		self.distances = None          

	def read_from_file(self, filename):
		"""
		Reads supercell data from a file and populates the attributes of the SUPERCELL object.
		
		Args:
		- filename (str): Path to the file containing supercell data.
		
		Populates:
		- cell: Lattice vectors as a 3x3 numpy array.
		- atoms: Atomic positions as a 3xN numpy array.
		- atoms_names_list: List of atom names in the order they appear.
		- atoms_names_ID: List of unique atom names.
		- atoms_names_full: Concatenated string of atom names.
		"""
		
		with open(filename, 'r') as file:
			lines = file.readlines()

			# Read lattice vectors
			i = 1  # Start after the "Supercell lattice vectors" line
			lattice_vectors = []
			while lines[i].strip() and "Atomic positions" not in lines[i]:
				vector = tuple(map(float, lines[i].split(',')))
				lattice_vectors.append(vector)
				i += 1
			self.cell = np.array(lattice_vectors)

			# Skip the "Atomic positions" line
			i += 1

			# Read atomic positions
			atoms = []
			atoms_names_list = []
			while i < len(lines) and lines[i].strip():
				parts = lines[i].split()
				atom = parts[0]
				position = tuple(map(float, parts[1:]))
				atoms.append(position)
				atoms_names_list.append(atom)
				i += 1
			self.atoms = np.array(atoms)
			self.N = len(atoms)
			self.atoms_names_list = atoms_names_list
			self.atoms_names_ID = list(set(atoms_names_list))
			self.atoms_names_full = ''.join(atoms_names_list)

	@Logs.LogDecorator()
	def get_ase(self, ):
		return Atoms(	self.atoms_names_list,
			 positions=	self.atoms,
			 cell     =	self.cell,
			 pbc      =	[1, 1, 0] )

	def export_to_POSCAR(self, comment="Generated by SUPERCELL"):
		"""
		Exports the supercell data to the POSCAR format.

		Args:
		- comment (str): Comment line for the POSCAR file.

		Returns:
		- str: String representation of the data in POSCAR format.
		"""
		
		# Comment line
		poscar_data = [comment]
		
		# Scale factor
		poscar_data.append(str(self.scale))
		
		# Lattice vectors
		for vector in self.cell:
			formatted_vector = ["{:<15.10f}".format(val) for val in vector]
			poscar_data.append("\t".join(formatted_vector))
		
		# Unique atom names and their counts
		poscar_data.append( "\t".join(unique_atoms for unique_atoms in set(self.atoms_names_list) ) )
		poscar_data.append("\t".join( str(self.atoms_names_list.count(unique_atoms)) for unique_atoms in set(self.atoms_names_list)))
		print(poscar_data)

		# Selective dynamics and coordinate type
		poscar_data.append("Selective dynamics")
		poscar_data.append("Cartesian")
		
		# Atomic positions with specified format
		for position in self.atoms:
			poscar_data.append("   {:<15.10f}   {:<15.10f}   {: <15.10f}   T   T   T".format(*[val for val in position]))
			
		return "\n".join(poscar_data)

	def save_to_POSCAR(self, comment="Generated by SUPERCELL", filename="POSCAR"):
		"""
		Saves the supercell data to a file in the POSCAR format.

		Args:
		- comment (str): Comment line for the POSCAR file.
		- filename (str): Name of the file to save the data to.
		"""
		
		poscar_data = self.export_to_POSCAR(comment)

		with open(filename, 'w') as file:
			file.write(poscar_data)

# Example usage:
filename = "/home/akaris/Documents/code/Physics/VASP/v6.0/files/POSCAR/Cristals/NiOOH/*OH surface for pure NiOOH/SUPERCELL"
supercell = SUPERCELL()
supercell.read_from_file(filename)
print(supercell.cell)
print(supercell.atoms.shape)
print( supercell.atoms_names_list )

poscar = supercell.save_to_POSCAR()

